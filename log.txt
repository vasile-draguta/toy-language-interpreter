ID: 1
Execution Stack: Integer a; Integer b; Integer c; a = 1; b = 2; c = 5; switch (a * 10) case (b * c): print(a); print(b) case (10): print(100); print(200) default: print(300); print(300) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: Integer a Integer b; Integer c; a = 1; b = 2; c = 5; switch (a * 10) case (b * c): print(a); print(b) case (10): print(100); print(200) default: print(300); print(300) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: Integer b; Integer c; a = 1; b = 2; c = 5; switch (a * 10) case (b * c): print(a); print(b) case (10): print(100); print(200) default: print(300); print(300) 
Symbol Table: a -> 0
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: Integer b Integer c; a = 1; b = 2; c = 5; switch (a * 10) case (b * c): print(a); print(b) case (10): print(100); print(200) default: print(300); print(300) 
Symbol Table: a -> 0
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: Integer c; a = 1; b = 2; c = 5; switch (a * 10) case (b * c): print(a); print(b) case (10): print(100); print(200) default: print(300); print(300) 
Symbol Table: a -> 0, b -> 0
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: Integer c a = 1; b = 2; c = 5; switch (a * 10) case (b * c): print(a); print(b) case (10): print(100); print(200) default: print(300); print(300) 
Symbol Table: a -> 0, b -> 0
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: a = 1; b = 2; c = 5; switch (a * 10) case (b * c): print(a); print(b) case (10): print(100); print(200) default: print(300); print(300) 
Symbol Table: a -> 0, b -> 0, c -> 0
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: a = 1 b = 2; c = 5; switch (a * 10) case (b * c): print(a); print(b) case (10): print(100); print(200) default: print(300); print(300) 
Symbol Table: a -> 0, b -> 0, c -> 0
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: b = 2; c = 5; switch (a * 10) case (b * c): print(a); print(b) case (10): print(100); print(200) default: print(300); print(300) 
Symbol Table: a -> 1, b -> 0, c -> 0
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: b = 2 c = 5; switch (a * 10) case (b * c): print(a); print(b) case (10): print(100); print(200) default: print(300); print(300) 
Symbol Table: a -> 1, b -> 0, c -> 0
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: c = 5; switch (a * 10) case (b * c): print(a); print(b) case (10): print(100); print(200) default: print(300); print(300) 
Symbol Table: a -> 1, b -> 2, c -> 0
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: c = 5 switch (a * 10) case (b * c): print(a); print(b) case (10): print(100); print(200) default: print(300); print(300) 
Symbol Table: a -> 1, b -> 2, c -> 0
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: switch (a * 10) case (b * c): print(a); print(b) case (10): print(100); print(200) default: print(300); print(300) 
Symbol Table: a -> 1, b -> 2, c -> 5
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: switch (a * 10) case (b * c): print(a); print(b) case (10): print(100); print(200) default: print(300) print(300) 
Symbol Table: a -> 1, b -> 2, c -> 5
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: if (a * 10 == b * c) then (print(a); print(b)) else (if (a * 10 == 10) then (print(100); print(200)) else (print(300))) print(300) 
Symbol Table: a -> 1, b -> 2, c -> 5
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: print(a); print(b) print(300) 
Symbol Table: a -> 1, b -> 2, c -> 5
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: print(a) print(b) print(300) 
Symbol Table: a -> 1, b -> 2, c -> 5
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: print(b) print(300) 
Symbol Table: a -> 1, b -> 2, c -> 5
Output: 1
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: print(300) 
Symbol Table: a -> 1, b -> 2, c -> 5
Output: 1, 2
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: a -> 1, b -> 2, c -> 5
Output: 1, 2, 300
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: Ref(Integer) v1; Integer cnt; new(v1, 1); CreateSemaphore(cnt, HeapReading(v1)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: Ref(Integer) v1 Integer cnt; new(v1, 1); CreateSemaphore(cnt, HeapReading(v1)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: Integer cnt; new(v1, 1); CreateSemaphore(cnt, HeapReading(v1)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: v1 -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: Integer cnt new(v1, 1); CreateSemaphore(cnt, HeapReading(v1)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: v1 -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: new(v1, 1); CreateSemaphore(cnt, HeapReading(v1)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 0, v1 -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: new(v1, 1) CreateSemaphore(cnt, HeapReading(v1)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 0, v1 -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 1
Execution Stack: CreateSemaphore(cnt, HeapReading(v1)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 0, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 
-------------------

ID: 1
Execution Stack: CreateSemaphore(cnt, HeapReading(v1)) fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 0, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 
-------------------

ID: 1
Execution Stack: fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [])
-------------------

ID: 1
Execution Stack: fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)) fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [])
-------------------

ID: 1
Execution Stack: fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [])
-------------------

ID: 2
Execution Stack: acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [])
-------------------

ID: 1
Execution Stack: fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)) acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [])
-------------------

ID: 2
Execution Stack: acquire(cnt) WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [])
-------------------

ID: 1
Execution Stack: acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [2])
-------------------

ID: 2
Execution Stack: WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [2])
-------------------

ID: 3
Execution Stack: acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [2])
-------------------

ID: 1
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [2])
-------------------

ID: 2
Execution Stack: WriteHeap(v1, HeapReading(v1) * 10) print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [2])
-------------------

ID: 3
Execution Stack: acquire(cnt) WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [2])
-------------------

ID: 1
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [2])
-------------------

ID: 2
Execution Stack: print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [2])
-------------------

ID: 3
Execution Stack: acquire(cnt) WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [2])
-------------------

ID: 1
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [2])
-------------------

ID: 2
Execution Stack: print(HeapReading(v1)) release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [2])
-------------------

ID: 3
Execution Stack: acquire(cnt) WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [2])
-------------------

ID: 1
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [2])
-------------------

ID: 2
Execution Stack: release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [2])
-------------------

ID: 3
Execution Stack: acquire(cnt) WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [2])
-------------------

ID: 1
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [])
-------------------

ID: 2
Execution Stack: 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [])
-------------------

ID: 3
Execution Stack: acquire(cnt) WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [])
-------------------

ID: 1
Execution Stack: print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [1])
-------------------

ID: 3
Execution Stack: acquire(cnt) WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [1])
-------------------

ID: 1
Execution Stack: print(HeapReading(v1) - 1) release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [1])
-------------------

ID: 3
Execution Stack: acquire(cnt) WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [1])
-------------------

ID: 1
Execution Stack: release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 9
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [1])
-------------------

ID: 3
Execution Stack: acquire(cnt) WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 9
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [1])
-------------------

ID: 1
Execution Stack: 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 9
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [])
-------------------

ID: 3
Execution Stack: acquire(cnt) WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 9
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [])
-------------------

ID: 3
Execution Stack: WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 9
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [3])
-------------------

ID: 3
Execution Stack: WriteHeap(v1, HeapReading(v1) * 10) WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 9
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [3])
-------------------

ID: 3
Execution Stack: WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 9
File Table: {}
Heap Table: 1 -> 100
Semaphore Table: 1 -> (1, [3])
-------------------

ID: 3
Execution Stack: WriteHeap(v1, HeapReading(v1) * 2) print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 9
File Table: {}
Heap Table: 1 -> 100
Semaphore Table: 1 -> (1, [3])
-------------------

ID: 3
Execution Stack: print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 9
File Table: {}
Heap Table: 1 -> 200
Semaphore Table: 1 -> (1, [3])
-------------------

ID: 3
Execution Stack: print(HeapReading(v1)) release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 9
File Table: {}
Heap Table: 1 -> 200
Semaphore Table: 1 -> (1, [3])
-------------------

ID: 3
Execution Stack: release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 9, 200
File Table: {}
Heap Table: 1 -> 200
Semaphore Table: 1 -> (1, [3])
-------------------

ID: 3
Execution Stack: 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 9, 200
File Table: {}
Heap Table: 1 -> 200
Semaphore Table: 1 -> (1, [])
-------------------

ID: 4
Execution Stack: Ref(Integer) v1; Integer cnt; new(v1, 1); CreateSemaphore(cnt, HeapReading(v1)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 4
Execution Stack: Ref(Integer) v1 Integer cnt; new(v1, 1); CreateSemaphore(cnt, HeapReading(v1)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 4
Execution Stack: Integer cnt; new(v1, 1); CreateSemaphore(cnt, HeapReading(v1)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: v1 -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 4
Execution Stack: Integer cnt new(v1, 1); CreateSemaphore(cnt, HeapReading(v1)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: v1 -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 4
Execution Stack: new(v1, 1); CreateSemaphore(cnt, HeapReading(v1)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 0, v1 -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 4
Execution Stack: new(v1, 1) CreateSemaphore(cnt, HeapReading(v1)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 0, v1 -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
Semaphore Table: 
-------------------

ID: 4
Execution Stack: CreateSemaphore(cnt, HeapReading(v1)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 0, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 
-------------------

ID: 4
Execution Stack: CreateSemaphore(cnt, HeapReading(v1)) fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 0, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 
-------------------

ID: 4
Execution Stack: fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)); fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [])
-------------------

ID: 4
Execution Stack: fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt)) fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [])
-------------------

ID: 4
Execution Stack: fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)); acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [])
-------------------

ID: 5
Execution Stack: acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [])
-------------------

ID: 4
Execution Stack: fork(acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt)) acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [])
-------------------

ID: 5
Execution Stack: acquire(cnt) WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [])
-------------------

ID: 4
Execution Stack: acquire(cnt); print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [5])
-------------------

ID: 5
Execution Stack: WriteHeap(v1, HeapReading(v1) * 10); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [5])
-------------------

ID: 6
Execution Stack: acquire(cnt); WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [5])
-------------------

ID: 4
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [5])
-------------------

ID: 5
Execution Stack: WriteHeap(v1, HeapReading(v1) * 10) print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [5])
-------------------

ID: 6
Execution Stack: acquire(cnt) WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 1
Semaphore Table: 1 -> (1, [5])
-------------------

ID: 4
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [5])
-------------------

ID: 5
Execution Stack: print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [5])
-------------------

ID: 6
Execution Stack: acquire(cnt) WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [5])
-------------------

ID: 4
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [5])
-------------------

ID: 5
Execution Stack: print(HeapReading(v1)) release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [5])
-------------------

ID: 6
Execution Stack: acquire(cnt) WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [5])
-------------------

ID: 4
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [5])
-------------------

ID: 5
Execution Stack: release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [5])
-------------------

ID: 6
Execution Stack: acquire(cnt) WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [5])
-------------------

ID: 4
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [6])
-------------------

ID: 5
Execution Stack: 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [6])
-------------------

ID: 6
Execution Stack: WriteHeap(v1, HeapReading(v1) * 10); WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [6])
-------------------

ID: 4
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [6])
-------------------

ID: 6
Execution Stack: WriteHeap(v1, HeapReading(v1) * 10) WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 10
Semaphore Table: 1 -> (1, [6])
-------------------

ID: 4
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 100
Semaphore Table: 1 -> (1, [6])
-------------------

ID: 6
Execution Stack: WriteHeap(v1, HeapReading(v1) * 2); print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 100
Semaphore Table: 1 -> (1, [6])
-------------------

ID: 4
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 100
Semaphore Table: 1 -> (1, [6])
-------------------

ID: 6
Execution Stack: WriteHeap(v1, HeapReading(v1) * 2) print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 100
Semaphore Table: 1 -> (1, [6])
-------------------

ID: 4
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 200
Semaphore Table: 1 -> (1, [6])
-------------------

ID: 6
Execution Stack: print(HeapReading(v1)); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 200
Semaphore Table: 1 -> (1, [6])
-------------------

ID: 4
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 200
Semaphore Table: 1 -> (1, [6])
-------------------

ID: 6
Execution Stack: print(HeapReading(v1)) release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10
File Table: {}
Heap Table: 1 -> 200
Semaphore Table: 1 -> (1, [6])
-------------------

ID: 4
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 200
File Table: {}
Heap Table: 1 -> 200
Semaphore Table: 1 -> (1, [6])
-------------------

ID: 6
Execution Stack: release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 200
File Table: {}
Heap Table: 1 -> 200
Semaphore Table: 1 -> (1, [6])
-------------------

ID: 4
Execution Stack: acquire(cnt) print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 200
File Table: {}
Heap Table: 1 -> 200
Semaphore Table: 1 -> (1, [])
-------------------

ID: 6
Execution Stack: 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 200
File Table: {}
Heap Table: 1 -> 200
Semaphore Table: 1 -> (1, [])
-------------------

ID: 4
Execution Stack: print(HeapReading(v1) - 1); release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 200
File Table: {}
Heap Table: 1 -> 200
Semaphore Table: 1 -> (1, [4])
-------------------

ID: 4
Execution Stack: print(HeapReading(v1) - 1) release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 200
File Table: {}
Heap Table: 1 -> 200
Semaphore Table: 1 -> (1, [4])
-------------------

ID: 4
Execution Stack: release(cnt) 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 200, 199
File Table: {}
Heap Table: 1 -> 200
Semaphore Table: 1 -> (1, [4])
-------------------

ID: 4
Execution Stack: 
Symbol Table: cnt -> 1, v1 -> (1, Integer)
Output: 10, 200, 199
File Table: {}
Heap Table: 1 -> 200
Semaphore Table: 1 -> (1, [])
-------------------

