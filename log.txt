ID: 11
Execution Stack: Integer v Ref(Integer) a; v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: Ref(Integer) a; v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: Ref(Integer) a v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: v = 10 new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: new(a, 22) fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 11
Execution Stack: fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))) print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 11
Execution Stack: print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 12
Execution Stack: WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 11
Execution Stack: print(v) print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 12
Execution Stack: WriteHeap(a, 30) v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 11
Execution Stack: print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 12
Execution Stack: v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 11
Execution Stack: 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 12
Execution Stack: v = 32 print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 12
Execution Stack: print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 12
Execution Stack: print(v) print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 12
Execution Stack: print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30, 32
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 12
Execution Stack: 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30, 32, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 11
Execution Stack: Integer v Ref(Integer) a; v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: Ref(Integer) a; v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: Ref(Integer) a v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: v = 10 new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: new(a, 22) fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 11
Execution Stack: fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))) print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 11
Execution Stack: print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 12
Execution Stack: WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 11
Execution Stack: print(v) print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 12
Execution Stack: WriteHeap(a, 30) v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 11
Execution Stack: print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 12
Execution Stack: v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 11
Execution Stack: 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 12
Execution Stack: v = 32 print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 12
Execution Stack: print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 12
Execution Stack: print(v) print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 12
Execution Stack: print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30, 32
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 12
Execution Stack: 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30, 32, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 6
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 4
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 4
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 4
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 4
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 4
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 4
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 7
Execution Stack: Integer v; Ref(Integer) a; v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 7
Execution Stack: Integer v Ref(Integer) a; v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 7
Execution Stack: Ref(Integer) a; v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 7
Execution Stack: Ref(Integer) a v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 7
Execution Stack: v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 7
Execution Stack: v = 10 new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 7
Execution Stack: new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 7
Execution Stack: new(a, 22) fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 7
Execution Stack: fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 7
Execution Stack: fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))) print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 7
Execution Stack: print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 10
Execution Stack: WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 7
Execution Stack: print(v) print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 10
Execution Stack: WriteHeap(a, 30) v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 7
Execution Stack: print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 10
Execution Stack: v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 7
Execution Stack: 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 10
Execution Stack: v = 32 print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 10
Execution Stack: print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 10
Execution Stack: print(v) print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 10
Execution Stack: print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30, 32
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 10
Execution Stack: 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30, 32, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 11
Execution Stack: Integer a; Integer b; a = 2; b = 5; if (a < b) then (print(a is less than b)) else (print(a is not less than b)) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: Integer a Integer b; a = 2; b = 5; if (a < b) then (print(a is less than b)) else (print(a is not less than b)) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: Integer b; a = 2; b = 5; if (a < b) then (print(a is less than b)) else (print(a is not less than b)) 
Symbol Table: a -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: Integer b a = 2; b = 5; if (a < b) then (print(a is less than b)) else (print(a is not less than b)) 
Symbol Table: a -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: a = 2; b = 5; if (a < b) then (print(a is less than b)) else (print(a is not less than b)) 
Symbol Table: a -> 0, b -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: a = 2 b = 5; if (a < b) then (print(a is less than b)) else (print(a is not less than b)) 
Symbol Table: a -> 0, b -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: b = 5; if (a < b) then (print(a is less than b)) else (print(a is not less than b)) 
Symbol Table: a -> 2, b -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: b = 5 if (a < b) then (print(a is less than b)) else (print(a is not less than b)) 
Symbol Table: a -> 2, b -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: if (a < b) then (print(a is less than b)) else (print(a is not less than b)) 
Symbol Table: a -> 2, b -> 5
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: print(a is less than b) 
Symbol Table: a -> 2, b -> 5
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 11
Execution Stack: 
Symbol Table: a -> 2, b -> 5
Output: a is less than b
File Table: {}
Heap Table: 
-------------------

ID: 14
Execution Stack: string varf; varf = test.in; openFile(varf); Integer varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 14
Execution Stack: string varf varf = test.in; openFile(varf); Integer varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 14
Execution Stack: varf = test.in; openFile(varf); Integer varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 14
Execution Stack: varf = test.in openFile(varf); Integer varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 14
Execution Stack: openFile(varf); Integer varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 14
Execution Stack: openFile(varf) Integer varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 14
Execution Stack: Integer varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in
Output: 
File Table: {test.in=java.io.BufferedReader@cc78f78}
Heap Table: 
-------------------

ID: 14
Execution Stack: Integer varc readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in
Output: 
File Table: {test.in=java.io.BufferedReader@cc78f78}
Heap Table: 
-------------------

ID: 14
Execution Stack: readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 0
Output: 
File Table: {test.in=java.io.BufferedReader@cc78f78}
Heap Table: 
-------------------

ID: 14
Execution Stack: readFile(varf) print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 0
Output: 
File Table: {test.in=java.io.BufferedReader@cc78f78}
Heap Table: 
-------------------

ID: 14
Execution Stack: print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 50
Output: 
File Table: {test.in=java.io.BufferedReader@cc78f78}
Heap Table: 
-------------------

ID: 14
Execution Stack: print(varc) readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 50
Output: 
File Table: {test.in=java.io.BufferedReader@cc78f78}
Heap Table: 
-------------------

ID: 14
Execution Stack: readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 50
Output: 50
File Table: {test.in=java.io.BufferedReader@cc78f78}
Heap Table: 
-------------------

ID: 14
Execution Stack: readFile(varf) print(varc); closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 50
Output: 50
File Table: {test.in=java.io.BufferedReader@cc78f78}
Heap Table: 
-------------------

ID: 14
Execution Stack: print(varc); closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 15
Output: 50
File Table: {test.in=java.io.BufferedReader@cc78f78}
Heap Table: 
-------------------

ID: 14
Execution Stack: print(varc) closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 15
Output: 50
File Table: {test.in=java.io.BufferedReader@cc78f78}
Heap Table: 
-------------------

ID: 14
Execution Stack: closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 15
Output: 50, 15
File Table: {test.in=java.io.BufferedReader@cc78f78}
Heap Table: 
-------------------

ID: 14
Execution Stack: 
Symbol Table: varf -> test.in, varc -> 15
Output: 50, 15
File Table: {}
Heap Table: 
-------------------

ID: 17
Execution Stack: string varf; varf = test.in; openFile(varf); Integer varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: string varf; varf = test.in; openFile(varf); Integer varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: string varf varf = test.in; openFile(varf); Integer varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: varf = test.in; openFile(varf); Integer varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: varf = test.in openFile(varf); Integer varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: openFile(varf); Integer varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: openFile(varf) Integer varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in
Output: 
File Table: {test.in=java.io.BufferedReader@5ebe0dfe}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer varc readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in
Output: 
File Table: {test.in=java.io.BufferedReader@5ebe0dfe}
Heap Table: 
-------------------

ID: 1
Execution Stack: readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 0
Output: 
File Table: {test.in=java.io.BufferedReader@5ebe0dfe}
Heap Table: 
-------------------

ID: 1
Execution Stack: readFile(varf) print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 0
Output: 
File Table: {test.in=java.io.BufferedReader@5ebe0dfe}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(varc); readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 50
Output: 
File Table: {test.in=java.io.BufferedReader@5ebe0dfe}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(varc) readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 50
Output: 
File Table: {test.in=java.io.BufferedReader@5ebe0dfe}
Heap Table: 
-------------------

ID: 1
Execution Stack: readFile(varf); print(varc); closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 50
Output: 50
File Table: {test.in=java.io.BufferedReader@5ebe0dfe}
Heap Table: 
-------------------

ID: 1
Execution Stack: readFile(varf) print(varc); closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 50
Output: 50
File Table: {test.in=java.io.BufferedReader@5ebe0dfe}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(varc); closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 15
Output: 50
File Table: {test.in=java.io.BufferedReader@5ebe0dfe}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(varc) closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 15
Output: 50
File Table: {test.in=java.io.BufferedReader@5ebe0dfe}
Heap Table: 
-------------------

ID: 1
Execution Stack: closeFile(varf) 
Symbol Table: varf -> test.in, varc -> 15
Output: 50, 15
File Table: {test.in=java.io.BufferedReader@5ebe0dfe}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: varf -> test.in, varc -> 15
Output: 50, 15
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer a; Integer b; a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer a Integer b; a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: Integer v; Ref(Integer) a; v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: Integer v Ref(Integer) a; v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: Ref(Integer) a; v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: Ref(Integer) a v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: v = 10 new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: new(a, 22) fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 2
Execution Stack: fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))) print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 2
Execution Stack: print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 3
Execution Stack: WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 2
Execution Stack: print(v) print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 3
Execution Stack: WriteHeap(a, 30) v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 2
Execution Stack: print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 3
Execution Stack: v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 2
Execution Stack: 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 3
Execution Stack: v = 32 print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 3
Execution Stack: print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 3
Execution Stack: print(v) print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 3
Execution Stack: print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30, 32
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 3
Execution Stack: 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30, 32, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 4
Execution Stack: Ref(Integer) v; new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 4
Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 4
Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer a; Integer b; a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: Integer a; Integer b; a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: Integer a Integer b; a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: Integer b; a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: a -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: Integer b a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: a -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: a -> 0, b -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer a; Integer b; a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer a Integer b; a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer b; a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: a -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer b a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: a -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: a -> 0, b -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: a = 2 + 3 * 5 b = a + 1; print(b) 
Symbol Table: a -> 0, b -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: b = a + 1; print(b) 
Symbol Table: a -> 17, b -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: b = a + 1 print(b) 
Symbol Table: a -> 17, b -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(b) 
Symbol Table: a -> 17, b -> 18
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: a -> 17, b -> 18
Output: 18
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer a; Integer b; a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer a Integer b; a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer b; a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: a -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer b a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: a -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: a -> 0, b -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer a; Integer b; a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer a Integer b; a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer b; a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: a -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer b a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: a -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: a = 2 + 3 * 5; b = a + 1; print(b) 
Symbol Table: a -> 0, b -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: a = 2 + 3 * 5 b = a + 1; print(b) 
Symbol Table: a -> 0, b -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: b = a + 1; print(b) 
Symbol Table: a -> 17, b -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: b = a + 1 print(b) 
Symbol Table: a -> 17, b -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: print(b) 
Symbol Table: a -> 17, b -> 18
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: 
Symbol Table: a -> 17, b -> 18
Output: 18
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: Boolean a; Integer v; a = true; if (a) then (v = 2) else (v = 3); print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: Boolean a Integer v; a = true; if (a) then (v = 2) else (v = 3); print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: Integer v; a = true; if (a) then (v = 2) else (v = 3); print(v) 
Symbol Table: a -> false
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: Integer v a = true; if (a) then (v = 2) else (v = 3); print(v) 
Symbol Table: a -> false
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: a = true; if (a) then (v = 2) else (v = 3); print(v) 
Symbol Table: a -> false, v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: a = true if (a) then (v = 2) else (v = 3); print(v) 
Symbol Table: a -> false, v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: if (a) then (v = 2) else (v = 3); print(v) 
Symbol Table: a -> true, v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: if (a) then (v = 2) else (v = 3) print(v) 
Symbol Table: a -> true, v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: v = 2 print(v) 
Symbol Table: a -> true, v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: print(v) 
Symbol Table: a -> true, v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: 
Symbol Table: a -> true, v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Ref(Integer) v; new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: new(v, 20) Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

ID: 1
Execution Stack: Ref(Ref(Integer)) a new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

ID: 1
Execution Stack: new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

ID: 1
Execution Stack: new(a, v) new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

ID: 1
Execution Stack: new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

ID: 1
Execution Stack: new(v, 30) print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

ID: 1
Execution Stack: print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (3, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer), 3 -> 30
-------------------

ID: 1
Execution Stack: 
Symbol Table: a -> (2, Ref(Integer)), v -> (3, Integer)
Output: 20
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer), 3 -> 30
-------------------

ID: 2
Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 2
Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v; Ref(Integer) a; v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v Ref(Integer) a; v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Ref(Integer) a; v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Ref(Integer) a v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 10 new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: new(a, 22) fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 1
Execution Stack: fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))) print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 1
Execution Stack: print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 2
Execution Stack: WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 1
Execution Stack: print(v) print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 2
Execution Stack: WriteHeap(a, 30) v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 1
Execution Stack: print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 2
Execution Stack: v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 1
Execution Stack: 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 2
Execution Stack: v = 32 print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 2
Execution Stack: print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 2
Execution Stack: print(v) print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 2
Execution Stack: print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30, 32
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 2
Execution Stack: 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30, 32, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 1
Execution Stack: Integer v; Ref(Integer) a; v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Integer v Ref(Integer) a; v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Ref(Integer) a; v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: Ref(Integer) a v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 10; new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: v = 10 new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: new(a, 22); fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: new(a, 22) fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (0, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 
-------------------

ID: 1
Execution Stack: fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))); print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 1
Execution Stack: fork(WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a))) print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 1
Execution Stack: print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 2
Execution Stack: WriteHeap(a, 30); v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 1
Execution Stack: print(v) print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 2
Execution Stack: WriteHeap(a, 30) v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 
File Table: {}
Heap Table: 1 -> 22
-------------------

ID: 1
Execution Stack: print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 2
Execution Stack: v = 32; print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 1
Execution Stack: 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 2
Execution Stack: v = 32 print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 10
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 2
Execution Stack: print(v); print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 2
Execution Stack: print(v) print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 2
Execution Stack: print(HeapReading(a)) 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30, 32
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 2
Execution Stack: 
Symbol Table: a -> (1, Integer), v -> 32
Output: 10, 30, 32, 30
File Table: {}
Heap Table: 1 -> 30
-------------------

ID: 3
Execution Stack: Integer a; Integer b; a = 2; b = 5; if (a < b) then (print(a is less than b)) else (print(a is not less than b)) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

