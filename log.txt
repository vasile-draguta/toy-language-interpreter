Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

Execution Stack: Integer v; v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Integer v v = 2; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: v = 2; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: v = 2 print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v) 
Symbol Table: v -> 2
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: 
Symbol Table: v -> 2
Output: 2
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v; new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20) Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: Ref(Ref(Integer)) a new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v) new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: new(v, 30) print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (3, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer), 3 -> 30
-------------------

Execution Stack: 
Symbol Table: a -> (2, Ref(Integer)), v -> (3, Integer)
Output: 20
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer), 3 -> 30
-------------------

Execution Stack: Ref(Integer) v; new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20) Ref(Ref(Integer)) a; new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Ref(Integer)) a; new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: Ref(Ref(Integer)) a new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v) print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: print(HeapReading(v)) print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 20
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 20, 25
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: Ref(Integer) v; new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20) Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: Ref(Ref(Integer)) a new(a, v); print(v); print(a) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v); print(v); print(a) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v) print(v); print(a) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: print(v); print(a) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: print(v) print(a) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: print(a) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: (1, Integer)
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: (1, Integer), (2, Ref(Integer))
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: Ref(Integer) v; new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20) Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: Ref(Ref(Integer)) a new(a, v); print(v); print(a) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v); print(v); print(a) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v) print(v); print(a) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: print(v); print(a) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: print(v) print(a) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: print(a) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: (1, Integer)
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: (1, Integer), (2, Ref(Integer))
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: (1, Integer), (2, Ref(Integer))
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20) Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (3, Integer)
Output: 
File Table: {}
Heap Table: 3 -> 20
-------------------

Execution Stack: Ref(Ref(Integer)) a new(a, v); print(v); print(a) 
Symbol Table: v -> (3, Integer)
Output: 
File Table: {}
Heap Table: 3 -> 20
-------------------

Execution Stack: new(a, v); print(v); print(a) 
Symbol Table: a -> (0, Ref(Integer)), v -> (3, Integer)
Output: 
File Table: {}
Heap Table: 3 -> 20
-------------------

Execution Stack: new(a, v) print(v); print(a) 
Symbol Table: a -> (0, Ref(Integer)), v -> (3, Integer)
Output: 
File Table: {}
Heap Table: 3 -> 20
-------------------

Execution Stack: print(v); print(a) 
Symbol Table: a -> (4, Ref(Integer)), v -> (3, Integer)
Output: 
File Table: {}
Heap Table: 3 -> 20, 4 -> (3, Integer)
-------------------

Execution Stack: print(v) print(a) 
Symbol Table: a -> (4, Ref(Integer)), v -> (3, Integer)
Output: 
File Table: {}
Heap Table: 3 -> 20, 4 -> (3, Integer)
-------------------

Execution Stack: print(a) 
Symbol Table: a -> (4, Ref(Integer)), v -> (3, Integer)
Output: (3, Integer)
File Table: {}
Heap Table: 3 -> 20, 4 -> (3, Integer)
-------------------

Execution Stack: 
Symbol Table: a -> (4, Ref(Integer)), v -> (3, Integer)
Output: (3, Integer), (4, Ref(Integer))
File Table: {}
Heap Table: 3 -> 20, 4 -> (3, Integer)
-------------------

Execution Stack: Ref(Integer) v; new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20) Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: Ref(Ref(Integer)) a new(a, v); print(v); print(a) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(a, v); print(v); print(a) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(a, v) print(v); print(a) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v); print(a) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 2 -> (1, Integer)
-------------------

Execution Stack: print(v) print(a) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(a) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: (1, Integer)
File Table: {}
Heap Table: 
-------------------

Execution Stack: 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: (1, Integer), (2, Ref(Integer))
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v; new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20) Ref(Ref(Integer)) a; new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Ref(Integer)) a; new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: Ref(Ref(Integer)) a new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(a, v) print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 2 -> (1, Integer)
-------------------

Execution Stack: print(HeapReading(v)) print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v; new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20) Ref(Ref(Integer)) a; new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Ref(Integer)) a; new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: Ref(Ref(Integer)) a new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(a, v); print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(a, v) print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(HeapReading(v)); print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 2 -> (1, Integer)
-------------------

Execution Stack: print(HeapReading(v)) print(HeapReading(HeapReading(a)) + 5) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v; new(v, 20); print(HeapReading(v)); WriteHeap(v, 30); print(HeapReading(v) + 5) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v new(v, 20); print(HeapReading(v)); WriteHeap(v, 30); print(HeapReading(v) + 5) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20); print(HeapReading(v)); WriteHeap(v, 30); print(HeapReading(v) + 5) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20) print(HeapReading(v)); WriteHeap(v, 30); print(HeapReading(v) + 5) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(HeapReading(v)); WriteHeap(v, 30); print(HeapReading(v) + 5) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: print(HeapReading(v)) WriteHeap(v, 30); print(HeapReading(v) + 5) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v; new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20) Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: Ref(Ref(Integer)) a new(a, v); print(v); print(a) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(a, v); print(v); print(a) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(a, v) print(v); print(a) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v); print(a) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 2 -> (1, Integer)
-------------------

Execution Stack: print(v) print(a) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(a) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: (1, Integer)
File Table: {}
Heap Table: 
-------------------

Execution Stack: 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: (1, Integer), (2, Ref(Integer))
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v; new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20) Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Ref(Integer)) a; new(a, v); print(v); print(a) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: Ref(Ref(Integer)) a new(a, v); print(v); print(a) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v); print(v); print(a) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v) print(v); print(a) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: print(v); print(a) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: print(v) print(a) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: print(a) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: (1, Integer)
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: (1, Integer), (2, Ref(Integer))
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: Ref(Integer) v; new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20) Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: Ref(Ref(Integer)) a new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v) new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: new(v, 30) print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (3, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer), 3 -> 30
-------------------

Execution Stack: 
Symbol Table: a -> (2, Ref(Integer)), v -> (3, Integer)
Output: 20
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer), 3 -> 30
-------------------

Execution Stack: Integer v; v = 4; while(print(v); v = v - 1) { v > 0 }; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Integer v v = 4; while(print(v); v = v - 1) { v > 0 }; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: v = 4; while(print(v); v = v - 1) { v > 0 }; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: v = 4 while(print(v); v = v - 1) { v > 0 }; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: while(print(v); v = v - 1) { v > 0 }; print(v) 
Symbol Table: v -> 4
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 4
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v); v = v - 1 while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 4
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v) v = v - 1 while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 4
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: v = v - 1 while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 4
Output: 4
File Table: {}
Heap Table: 
-------------------

Execution Stack: while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 3
Output: 4
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v); v = v - 1 while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 3
Output: 4
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v) v = v - 1 while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 3
Output: 4
File Table: {}
Heap Table: 
-------------------

Execution Stack: v = v - 1 while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 3
Output: 4, 3
File Table: {}
Heap Table: 
-------------------

Execution Stack: while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 2
Output: 4, 3
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v); v = v - 1 while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 2
Output: 4, 3
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v) v = v - 1 while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 2
Output: 4, 3
File Table: {}
Heap Table: 
-------------------

Execution Stack: v = v - 1 while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 2
Output: 4, 3, 2
File Table: {}
Heap Table: 
-------------------

Execution Stack: while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 1
Output: 4, 3, 2
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v); v = v - 1 while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 1
Output: 4, 3, 2
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v) v = v - 1 while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 1
Output: 4, 3, 2
File Table: {}
Heap Table: 
-------------------

Execution Stack: v = v - 1 while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 1
Output: 4, 3, 2, 1
File Table: {}
Heap Table: 
-------------------

Execution Stack: while(print(v); v = v - 1) { v > 0 } print(v) 
Symbol Table: v -> 0
Output: 4, 3, 2, 1
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v) 
Symbol Table: v -> 0
Output: 4, 3, 2, 1
File Table: {}
Heap Table: 
-------------------

Execution Stack: 
Symbol Table: v -> 0
Output: 4, 3, 2, 1, 0
File Table: {}
Heap Table: 
-------------------

Execution Stack: Integer v; v = 4; while(v > 0) { print(v); v = v - 1 }; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Integer v v = 4; while(v > 0) { print(v); v = v - 1 }; print(v) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: v = 4; while(v > 0) { print(v); v = v - 1 }; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: v = 4 while(v > 0) { print(v); v = v - 1 }; print(v) 
Symbol Table: v -> 0
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: while(v > 0) { print(v); v = v - 1 }; print(v) 
Symbol Table: v -> 4
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 4
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v); v = v - 1 while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 4
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v) v = v - 1 while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 4
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: v = v - 1 while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 4
Output: 4
File Table: {}
Heap Table: 
-------------------

Execution Stack: while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 3
Output: 4
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v); v = v - 1 while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 3
Output: 4
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v) v = v - 1 while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 3
Output: 4
File Table: {}
Heap Table: 
-------------------

Execution Stack: v = v - 1 while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 3
Output: 4, 3
File Table: {}
Heap Table: 
-------------------

Execution Stack: while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 2
Output: 4, 3
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v); v = v - 1 while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 2
Output: 4, 3
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v) v = v - 1 while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 2
Output: 4, 3
File Table: {}
Heap Table: 
-------------------

Execution Stack: v = v - 1 while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 2
Output: 4, 3, 2
File Table: {}
Heap Table: 
-------------------

Execution Stack: while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 1
Output: 4, 3, 2
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v); v = v - 1 while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 1
Output: 4, 3, 2
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v) v = v - 1 while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 1
Output: 4, 3, 2
File Table: {}
Heap Table: 
-------------------

Execution Stack: v = v - 1 while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 1
Output: 4, 3, 2, 1
File Table: {}
Heap Table: 
-------------------

Execution Stack: while(v > 0) { print(v); v = v - 1 } print(v) 
Symbol Table: v -> 0
Output: 4, 3, 2, 1
File Table: {}
Heap Table: 
-------------------

Execution Stack: print(v) 
Symbol Table: v -> 0
Output: 4, 3, 2, 1
File Table: {}
Heap Table: 
-------------------

Execution Stack: 
Symbol Table: v -> 0
Output: 4, 3, 2, 1, 0
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v; new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20) Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: Ref(Ref(Integer)) a new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v) new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: new(v, 30) print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (3, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer), 3 -> 30
-------------------

Execution Stack: 
Symbol Table: a -> (2, Ref(Integer)), v -> (3, Integer)
Output: 20
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer), 3 -> 30
-------------------

Execution Stack: 
Symbol Table: a -> (2, Ref(Integer)), v -> (3, Integer)
Output: 20
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer), 3 -> 30
-------------------

Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20) Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (4, Integer)
Output: 
File Table: {}
Heap Table: 4 -> 20
-------------------

Execution Stack: Ref(Ref(Integer)) a new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (4, Integer)
Output: 
File Table: {}
Heap Table: 4 -> 20
-------------------

Execution Stack: new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (0, Ref(Integer)), v -> (4, Integer)
Output: 
File Table: {}
Heap Table: 4 -> 20
-------------------

Execution Stack: new(a, v) new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (0, Ref(Integer)), v -> (4, Integer)
Output: 
File Table: {}
Heap Table: 4 -> 20
-------------------

Execution Stack: new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (5, Ref(Integer)), v -> (4, Integer)
Output: 
File Table: {}
Heap Table: 4 -> 20, 5 -> (4, Integer)
-------------------

Execution Stack: new(v, 30) print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (5, Ref(Integer)), v -> (4, Integer)
Output: 
File Table: {}
Heap Table: 4 -> 20, 5 -> (4, Integer)
-------------------

Execution Stack: print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (5, Ref(Integer)), v -> (6, Integer)
Output: 
File Table: {}
Heap Table: 4 -> 20, 5 -> (4, Integer), 6 -> 30
-------------------

Execution Stack: 
Symbol Table: a -> (5, Ref(Integer)), v -> (6, Integer)
Output: 20
File Table: {}
Heap Table: 4 -> 20, 5 -> (4, Integer), 6 -> 30
-------------------

Execution Stack: Ref(Integer) v; new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20) Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: Ref(Ref(Integer)) a new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v) new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: new(v, 30) print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (3, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer), 3 -> 30
-------------------

Execution Stack: 
Symbol Table: a -> (2, Ref(Integer)), v -> (3, Integer)
Output: 20
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer), 3 -> 30
-------------------

Execution Stack: Ref(Integer) v; new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Integer) v new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: 
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20); Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: new(v, 20) Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (0, Integer)
Output: 
File Table: {}
Heap Table: 
-------------------

Execution Stack: Ref(Ref(Integer)) a; new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: Ref(Ref(Integer)) a new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v); new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(a, v) new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (0, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20
-------------------

Execution Stack: new(v, 30); print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: new(v, 30) print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (1, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer)
-------------------

Execution Stack: print(HeapReading(HeapReading(a))) 
Symbol Table: a -> (2, Ref(Integer)), v -> (3, Integer)
Output: 
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer), 3 -> 30
-------------------

Execution Stack: 
Symbol Table: a -> (2, Ref(Integer)), v -> (3, Integer)
Output: 20
File Table: {}
Heap Table: 1 -> 20, 2 -> (1, Integer), 3 -> 30
-------------------

